

!!==============================================================================
!!
!!	PROYECTO 1973
!!	Prólogo: El Limbo
!!
!!==============================================================================
!!
!!	File:			1973_escena0.inf
!!	Author(s):		J. Francisco Martín (jfm.lisaso@gmail.com)
!!	Languague:		ES (Castellano)
!!	System:			Inform, INFSP 6
!!	Platform:		Z-Machine / GLULX
!!	Version:		0.0
!!	Released:		0000/00/00
!!
!!------------------------------------------------------------------------------
!!
!!	Copyright (c) 2013, J. Francisco Martín
!!
!!	This file is part of PROYECTO 1973.
!!
!!	PROYECTO 1973 is free software: you can redistribute it and/or modify 
!!	it under the terms of the GNU General Public License as published by 
!!	the Free Software Foundation, either version 3 of the License, or 
!!	(at your option) any later version.
!!
!!	PROYECTO 1973 is distributed in the hope that it will be useful, 
!!	but WITHOUT ANY WARRANTY; without even the implied warranty of 
!!	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
!!	GNU General Public License for more details.
!!
!!	You should have received a copy of the GNU General Public License 
!!	along with Foobar.  If not, see <http://www.gnu.org/licenses/>.
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!	Definición de atributos y clases
!!------------------------------------------------------------------------------

!!------------------------------------------------------------------------------
Class	Room
 with	description [;
			if (action == ##Look || self hasnt visited) self.long_description();
			else self.short_description();
			!! Espacio para elementos comunes a las dos descripciones
			return true;
		],
		long_description "EN CONSTRUCCIÓN.",
		!! Por defecto, la descripción corta es la misma descripción larga
		short_description [; return self.long_description(); ],
		!! Si se activa, se inhibe el listado automático de objetos simples 
		!! al imprimir la descripción de la localidad (ver comportamiento de 
		!! ##Look en "1973_langLM.inf")
		inhibit_object_list false,
 has	light;

!!------------------------------------------------------------------------------
Class	Thing
 with	size	0,			! Tamaño
		volume	0,			! Volumen
		weight	0,			! Peso
		capacity_number	-1,	! Capacidad total: número de objetos
		capacity_size	-1,	! Capacidad total: tamaño
		capacity_volume	-1,	! Capacidad total: volumen
		capacity_weight	-1,	! Capacidad total: peso
		description [;
			switch (GRAMMATICAL_INFLECTION) {
				1:	print "No veo ";
				2:	print "No ves ";
				3:	print "No ve ";
				4:	print "No vi ";
				5:	print "No viste ";
				6:	print "No vio ";
			}
			"nada especial en ", (the) self, ".";
		];

!!------------------------------------------------------------------------------
Class	Item
 class	Thing
 with	long_description [;
			switch (GRAMMATICAL_INFLECTION) {
				1,2,3:	print "Tiene", (n) self;
				4,5,6:	print "Tenía", (n) self;
			}
			print " el mismo aspecto que cual";
			if ( self has pluralname ) print "esquiera otr";
			else print "quier otr";
			print (o) self, " ", (name) self, " ";
			switch (GRAMMATICAL_INFLECTION) {
				1:	"que haya visto antes.";
				2:	"que hayas visto antes.";
				3:	"que haya visto antes.";
				4:	"que hubiese visto antes.";
				5:	"que hubieses visto antes.";
				6:	"que hubiese visto antes.";
			}
		];

!!------------------------------------------------------------------------------
Class	Furniture
 class	Thing,
 with	before [;
			Pull, Push, PushDir, Take, Turn:
				switch (GRAMMATICAL_INFLECTION) {
					1,2,3:	print (The) self, " ", (es) self;
					4,5,6:	print (The) self, " era", (n) self;
				} " demasiado pesad", (o) self, " para andar moviéndol",
				(o) self, ".";
		],
 has	static;

!!------------------------------------------------------------------------------
Class	Atrezzo
 class	Thing
 has	scenery;

!!------------------------------------------------------------------------------
!! TODO: Crear clase atuendo (Attire) que implemente propiedad list_together

!!------------------------------------------------------------------------------
!!	Hay algunas librerías para manejar conversaciones que definen una nueva 
!!	clase con la que representar personajes (por ejemplo "gtalk.h" de Greg 
!!	Boettcher, Krister Fundin y Mark J. Tilford para manejar conversaciones 
!!	por medio de menús, define la clase Character). Se puede reutilizar la 
!!	clase definida en una librería externa dentro de NPC convirtiendo esta 
!!	última en una subclase de aquella definida en la librería externa.
!!------------------------------------------------------------------------------
Class	NPC
 class	Thing
! class	Character	! Definida en la librería "gtalk.h"
 with	life [;
			Answer, Ask, AskFor, Order, Tell:
				print_ret (parser) "Para iniciar una conversación usa 
				simplemente la orden HABLA (a/con) PERSONAJE.";
		],
 has	animate;

!!------------------------------------------------------------------------------
!! TODO - repasar el conjunto completo de acciones de la librería para 
!! determinar su comportamiento cuando el protagonista se encuentra dentro o 
!! sobre un objeto SmartEnterable
Class	SmartEnterable
 with	react_before [; if (player notin self) return false;
			!! GROUP 2 ACTIONS: Usually work, given the right circumstances.
			Close, Open:
				if (noun hasnt openable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Disrobe, Wear:
				if (noun == nothing or player or self)			return false;
				if (noun hasnt clothing)						return false;
				<Exit self>; new_line;
				return false;
			Drop: !! TODO: Comprobar funcionamiento
				return false;
			Eat:
				if (noun hasnt edible)							return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Empty, Remove, Search, Take:
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			EmptyT: !! TODO: Comprobar funcionamiento
				if (ObjectIsUntouchable(noun, 1)) return false;
				if (self.out_of_reach(second)) { <Exit self>; new_line; }
				return false;
!Enter
			Exit:
				if (noun == nothing) <<Exit self>>;
!GetOff
!Give
			Go:
				if (noun == nothing or player or self)			return false;
				if (~~(noun ofclass CompassDirection))			return false;
				<Exit self>; new_line;
				return false;
!GoIn
			Insert, PutOn:
				if ((second == d_obj) || (player in second)) <<Drop noun>>;
				if (self.out_of_reach(second)) { <Exit self>; new_line; }
				return false;
			Lock, Unlock:
				if (noun hasnt lockable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
!Order
!Show
			SwitchOff, SwitchOn:
				if (noun hasnt switchable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Transfer: !! TODO: Comprobar funcionamiento
				if (noun notin player)							return false;
				return false;
			!! GROUP 3 ACTIONS: Output a message and stop at the "before" stage.
!Answer
!Ask
!AskFor
			Attack, Blow, LookUnder, Smell, Squeeze, Taste, Touch:
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Burn:
				!! TODO: comprobaciones de noun y second
				return false;
!Buy
			Climb:
				if (noun has enterable) {
					if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				}
				return false;
!Consult
!Fill
!Jump
!JumpOver
!Kiss
!LetGo
!Listen
!Mild
!No
!Pray
			Pull, Push, Turn: !! TODO:
				! if (noun has scenery or static or concealed)	return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
!PushDir
!Receive
!Rub
!Set
!SetTo
!Swim
!Swing
!Tell
!Wake
!WakeOther
!Wave
!WaveHands
!! CUSTOM ACTIONS
!Dance
!GoDown
!GoUp
!KnockOn
!Masturbate
!Sit
!SleepWith
			StandUp:
				if (noun == nothing) <<Exit self>>;
!TalkTo
!Untie
!Use
		],
		out_of_reach [ obj;
			if (obj == nothing or player or self)	return false;
			if (IndirectlyContains(self, obj))		return false;
			if (IndirectlyContains(player, obj))	return false;
			return true;
		],
 has	enterable;


!!==============================================================================
!!	LIMBO: En algún lugar
!!------------------------------------------------------------------------------

Room	LIMBO "En algún lugar"
 with	name	'limbo' 'lugar' 'sueno' 'vacio',
		clarification "",
		description [;
			print "Más allá de la barrera casi insuperable que separa la 
			realidad de todo lo demás. Un lugar etéreo, donde la vida, la 
			materia y la vitalidad no son necesariamente constantes; un lugar 
			donde el tiempo y el espacio no existen tal y como los capta 
			nuestro ser despierto...";
			if (self hasnt visited)
				print (emph) " ¿Qué? ¿Cómo?... ¿cómo he llegado aquí?";
			new_line;
			return true;
		];

Object	HelpSystem
 with	found_in [;
			return true;
		], 
		react_before [;
			Examine:
				if (self.examine_flag && ~~self.examine_explained) {
					self.examine_flag = false;
					self.examine_explained = true;
					self.examine_after();
					new_line;
				}
			Go:
				if (~~self.go_explained)
					self.go_explained = true;
				if (self.go_flag) {
					self.go_flag = false;
					self.go_after();
					new_line;
				}
			Inv, InvTall, InvWide:
				if (~~self.inventory_explained)
					self.inventory_explained = true;
				if (self.inventory_flag) {
					self.inventory_flag = false;
					self.inventory_after();
					new_line;
				}
			Look:
				if (self.look_flag && ~~self.look_explained) {
					self.look_flag = false;
					self.look_explained = true;
					self.look_after();
					new_line;
				}
!! TODO - probar
			Open:
				if (~~self.open_explained_1 && noun == cortinas)
					self.open_explained_1 = true;
				if (~~self.open_explained_2 && noun == cortinas)
					self.open_explained_2 = true;
			Take:
				if (~~self.take_explained)
					self.take_explained = true;
				if (self.take_flag) {
					self.take_flag = false;
					self.take_after();
					new_line;
				}
			Use:
				self.use_after();
				new_line;
		], 
		react_after [;
			if (self.start_flag) {
				self.start_flag = false;
				new_line;
				print_ret (parser) "Si lo necesitas puedes teclear AYUDA en 
				cualquier momento.";
			}
		], 
		new_clue [;
			!! Acción LOOK:
			if (~~self.look_explained) {
				self.look_flag = true;
				return self.look_before();
			}
			!! Acción EXAMINE:
			if (~~self.examine_explained) {
				self.examine_flag = true;
				return self.examine_before();
			}
			!! Acción OPEN:
			if (real_location == HABITACION && ~~self.open_explained_1) {
				self.open_explained_1 = true;
				return self.open_before_1();
			}
			if (real_location == HABITACION && ~~self.open_explained_2) {
				self.open_explained_2 = true;
				return self.open_before_2();
			}
			!! Acción TAKE:
			if (~~self.take_explained) {
				self.take_flag = true;
				return self.take_before();
			}
			!! Acción INVENTORY:
			if (~~self.inventory_explained) {
				self.inventory_flag = true;
				return self.inventory_before();
			}
			!! Acción GO:
			if (~~self.go_explained) {
				self.go_flag = true;
				return self.go_before();
			}
			!! Meta-acciones:
			if (~~self.meta_explained) {
				self.meta_explained = true;
				return self.meta_before();
			}
			!! Respuesta genérica:
			return self.no_action();
		], 
 private
		start_flag true,
		no_action [;
			print_ret (parser) "Hay muchas otras acciones que puedes intentar 
			hacer para conocer más cosas sobre el protagonista y su entorno. No 
			tengas miedo de experimentar con nuevas instrucciones.";
		], 
		!! Acción LOOK:
		look_flag false, 
		look_explained false, 
		look_before [;
			print_ret (parser) "Puedes volver a obtener una descripción de los 
			alrededores tecleando MIRA A TU ALREDEDOR, o simplemente MIRA.";
		], 
		look_after [;
			print_ret (parser) "En el futuro puedes usar indistintamente la 
			intrucción MIRA, o limitarte a pulsar la tecla @<<intro@>> para 
			leer de nuevo la descripción del lugar en que se encuentra Gabriel. 
			Si te atascas y no sabes cómo continuar puedes volver a teclear 
			AYUDA en cualquier momento.";
		], 
		!! Acción EXAMINE:
		examine_flag false, 
		examine_explained false, 
		examine_before [;
			print_ret (parser) "Los objetos tienen sus propias descripciones 
			también. Puedes averiguar más cosas sobre un objeto en particular 
			usando la instrucción EXAMINA. Prueba a examinar las cortinas, por 
			ejemplo.";
		], 
		examine_after [;
			print_ret (parser) "Dado que examinar objetos es una acción muy 
			frecuente, puedes abreviar el comando y teclear EX, X o simplemente 
			el nombre del objeto que quieras examinar. De este modo, la 
			instrucción EXAMINA LAS CORTINAS es equivalente a escribir EX 
			CORTINAS o CORTINAS a secas.";
		], 
		!! Acción OPEN:
		open_explained_1 false,
		open_explained_2 false,  
		open_before_1 [;
			print_ret (parser) "Con la escasa luz que hay en la habitación 
			apenas puedes hacer nada. Intenta abrir las cortinas para dejar 
			pasar la luz del exterior.";
		], 
		open_before_2 [;
			print_ret (parser) "Para abrir las cortinas tienes que utilizar la 
			instrucción ABRE CORTINAS.";
		], 
		!! Acción TAKE/DROP:
		take_flag false, 
		take_explained false, 
		take_before [;
			print_ret (parser) "A lo largo del relato te encontrarás con varios 
			objetos que Gabriel podrá coger y llevar consigo. Prueba, por 
			ejemplo, a recoger esa ropa que hay sobre la cama.";
		], 
		take_after [;
			print_ret (parser) "De forma análoga, también podrás hacer que 
			Gabriel suelte los objetos que lleva encima usando la instrucción 
			DEJA <OBJETO>. Además, normalmente los objetos se pueden manipular 
			de muchas otras maneras (ya has visto que se pueden intentar 
			examinar, abrir y cerrar o coger y dejar, pero también vestir, 
			tocar, oler, empujar, etc). Un mensaje te informará del efecto que 
			tiene la acción sobre el objeto:";
		], 
		!! Acción INVENTORY:
		inventory_flag false, 
		inventory_explained false, 
		inventory_before [;
			print_ret (parser) "Cuando Gabriel coje un objeto, este deja de 
			estar en el sitio que ocupaba antes y pasa a su poder. Puedes ver 
			las cosas que Gabriel lleva encima en cualquier momento tecleando 
			INVENTARIO.";
		], 
		inventory_after [;
			print_ret (parser) "Comprobar cuáles son los objetos que lleva el 
			protagonista es una acción muy habitual de forma que, al igual que 
			muchas otras, también podrás abreviarla. INVENTARIO, INV o 
			simplemente I harán que se imprima el siguiente listado:";
		], 
		!! Acción GO:
		go_flag false, 
		go_explained false, 
		go_before [;
			print_ret (parser) "Para hacer que Gabriel se desplace de una 
			localidad a otra puedes teclear el nombre del punto cardinal en 
			dirección al cuál quieres ir (NORTE, SUR, ESTE, OESTE, así como 
			NORESTE, NOROESTE, etc). SAL, ENTRA, SUBE y BAJA son instrucciones 
			de movimientos también posibles -- lee con atención las 
			descripciones de cada localidad para hacerte una idea de en qué 
			direcciones puedes intentar moverte.";
		], 
		go_after [;
			print_ret (parser) "Los puntos cardinales se pueden abreviar por 
			N, S, E, W, NE, NW y así sucesivamente.";
		], 
		!! Meta-acciones:
		meta_explained false, 
		meta_before [;
			print_ret (parser) "Si quieres salir del relato, teclea TERMINAR. 
			Para guardar tu posición actual, teclea GUARDAR. CARGAR te 
			permitirá retomar una partida que hayas guardado previamente, y 
			REINICIAR comenzará el relato de nuevo desde el principio. Además, 
			si en algún momento quieres volver @<<un paso atrás@>>, teclea 
			DESHACER.";
		], 
		!! Acción USE:
		use_explained false, 
		use_after [;
			print_ret (parser) "Normalmente podrás intentar manipular los 
			objetos con los que te encuentres a lo largo del relato de muchas 
			formas distintas así que, existiendo tantas opciones diferentes, 
			la instrucción USA resulta demasiado ambigua. Prueba a realizar una 
			acción más concreta.";
		], 
		!! Muestras de duda:
		hesitate_explained false, 
		hesitate_after [;
			print_ret (parser) "Cuando Gabriel muestra signos de duda es porque 
			estás a punto de hacer algo que va a cambiar o a hacer avanzar el 
			desarrollo de la historia. Asegúrate de que es así como quieres 
			continuar y después repite la última instrucción.";
		],
 has	scenery;

!! TODO - repasar implementación
Atrezzo	"paredes" 
 with	found_in HABITACION CAFE, 
		name_m	'muro',
		name_mp	'muros',
		name_f	'pared' 'esquina',
		name_fp	'paredes' 'esquinas',
		gender	G_FEMENINO + G_PLURAL,
		adjectives 'blanco' 'blancos' 'blanca' 'blancas' 'amarillento' 
			'amarillentos' 'amarillenta' 'amarillentas',
		description [; switch ( GRAMMATICAL_INFLECTION ) {
!! XXX - modificar texto
			1,2,3: "No se observa nada digno de mención en ", (the) self, ".";
			4,5,6: "No se observaba nada digno de mención en ", (the) self, ".";
		}],
		before [;
			Examine:
				return false;
			default:
				switch (GRAMMATICAL_INFLECTION) {
					1, 2, 3: "No hace falta preocuparse por eso.";
					4, 5, 6: "No hacía falta preocuparse por eso.";
				}
		], 
 has	female pluralname;


