

!!==============================================================================
!!
!!	PROYECTO 1973
!!	Prólogo: El Limbo
!!
!!==============================================================================
!!
!!	File:			1973_escena0.inf
!!	Author(s):		J. Francisco Martín (jfm.lisaso@gmail.com)
!!	Languague:		ES (Castellano)
!!	System:			Inform, INFSP 6
!!	Platform:		Z-Machine / GLULX
!!	Version:		1.0
!!	Released:		2014/02/01
!!
!!------------------------------------------------------------------------------
!!
!!	Copyright (c) 2014, J. Francisco Martín
!!
!!	This file is part of PROYECTO 1973.
!!
!!	PROYECTO 1973 is free software: you can redistribute it and/or modify 
!!	it under the terms of the GNU General Public License as published by 
!!	the Free Software Foundation, either version 3 of the License, or 
!!	(at your option) any later version.
!!
!!	PROYECTO 1973 is distributed in the hope that it will be useful, 
!!	but WITHOUT ANY WARRANTY; without even the implied warranty of 
!!	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
!!	GNU General Public License for more details.
!!
!!	You should have received a copy of the GNU General Public License 
!!	along with PROYECTO 1973. If not, see <http://www.gnu.org/licenses/>.
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!	Definición de atributos y clases
!!------------------------------------------------------------------------------

Attribute	remarkable;			! Marca un objeto como destacado

!!------------------------------------------------------------------------------
!! Representa un objeto localidad dentro del modelo de mundo.
!!------------------------------------------------------------------------------
Class	Room
 with	description [;
			if (action == ##Look || self hasnt visited) self.long_description();
			else self.short_description();
			!! Espacio para elementos comunes a las dos descripciones.
			return true;
		],
		long_description "EN CONSTRUCCIÓN.",
		!! Por defecto, la descripción corta es la misma descripción larga.
		short_description [; return self.long_description(); ],
		!! Si se activa, se inhibe el listado automático de objetos simples 
		!! al imprimir la descripción de la localidad (ver comportamiento de 
		!! ##Look en "1973_langLM.inf").
		inhibit_object_list false, 
		!! 
 has	light;

!!------------------------------------------------------------------------------
!! Representa un objeto físico no localidad dentro del modelo de mundo, con un 
!! tamaño, volumen y peso específicos, así como diferentes valores de capacidad 
!! como potencial contenedor para otros objetos. Ideado como una suerte de 
!! clase abstracta sobre la que definir otras subclases de objetos más 
!! concretas; es decir, no está pensada para implementar directamente objetos 
!! 'Thing' dentro del relato.
!!------------------------------------------------------------------------------
Class	Thing
 with	size	0,			! Tamaño
		volume	0,			! Volumen
		weight	0,			! Peso
		capacity_number	-1,	! Capacidad total: número de objetos
		capacity_size	-1,	! Capacidad total: tamaño
		capacity_volume	-1,	! Capacidad total: volumen
		capacity_weight	-1,	! Capacidad total: peso
		description [;
			switch (GRAMMATICAL_INFLECTION) {
				1:	print "No veo ";
				2:	print "No ves ";
				3:	print "No ve ";
				4:	print "No vi ";
				5:	print "No viste ";
				6:	print "No vio ";
			}
			"nada especial en ", (the) self, ".";
		];

!!------------------------------------------------------------------------------
!! Representa un objeto simple dentro del modelo de mundo sobre el que 
!! inicialmente no se aplican restricciones de ningún tipo.
!!------------------------------------------------------------------------------
Class	Item
 class	Thing
 with	description [;
			switch (GRAMMATICAL_INFLECTION) {
				1,2,3:	print "Tiene", (n) self;
				4,5,6:	print "Tenía", (n) self;
			}
			print " el mismo aspecto que cual";
			if ( self has pluralname ) print "esquiera otr";
			else print "quier otr";
			print (o) self, " ", (name) self, " ";
			switch (GRAMMATICAL_INFLECTION) {
				1:	"que haya visto antes.";
				2:	"que hayas visto antes.";
				3:	"que haya visto antes.";
				4:	"que hubiese visto antes.";
				5:	"que hubieses visto antes.";
				6:	"que hubiese visto antes.";
			}
		];

!!------------------------------------------------------------------------------
!! Representa un objeto estático dentro del modelo de mundo. Se aplica la 
!! restricción 'static' definida por la librería Inform.
!!------------------------------------------------------------------------------
Class	Furniture
 class	Thing,
 with	before [;
			Pull, Push, PushDir, Take, Turn:
				switch (GRAMMATICAL_INFLECTION) {
					1,2,3:	print (The) self, " ", (es) self;
					4,5,6:	print (The) self, " era", (n) self;
				} " demasiado pesad", (o) self, " para andar moviéndol",
				(o) self, ".";
		],
 has	static;

!!------------------------------------------------------------------------------
!! Representa un objeto decorado dentro del modelo de mundo. Se aplica la 
!! restricción 'scenery' definida por la librería Inform.
!!------------------------------------------------------------------------------
Class	Atrezzo
 class	Thing
 has	scenery;

!!------------------------------------------------------------------------------
!! TODO: Crear clase atuendo (Attire) que implemente propiedad list_together, 
!! para representar prendas de vestir.
!!------------------------------------------------------------------------------

!!------------------------------------------------------------------------------
!! Representa un personaje no jugador. Hay algunas librerías para manejar 
!! conversaciones que definen una nueva clase con la que representar personajes 
!! (por ejemplo "gtalk.h" de Greg Boettcher, Krister Fundin y Mark J. Tilford 
!! para manejar conversaciones por medio de menús, define la clase 'Character'). 
!! Se puede reutilizar la clase definida en una librería externa dentro de NPC 
!! convirtiendo esta última en una subclase de aquella definida en la librería 
!! externa. Por ejemplo:
!!
!!		Class NPC
!!			class Thing
!!			class Character ! Definida en la librería "gtalk.h"
!!			[...]
!!		;
!!------------------------------------------------------------------------------
Class	NPC
 class	Thing
 with	life [;
			Answer, Ask, AskFor, Order, Tell:
				print_ret (parser) "Para iniciar una conversación usa 
				simplemente la orden HABLA (a/con) PERSONAJE.";
		],
 has	animate;

!!------------------------------------------------------------------------------
!! Representa un objeto al que el personaje jugador pueden entrar o subirse 
!! encima.
!!
!! TODO - repasar el conjunto completo de acciones de la librería para 
!! determinar su comportamiento cuando el personaje jugador se encuentra dentro 
!! o sobre un objeto 'SmartEnterable'.
!!------------------------------------------------------------------------------
Class	SmartEnterable
 with	react_before [; if (player notin self) return false;
			!! GROUP 2 ACTIONS: Usually work, given the right circumstances.
			Close, Open:
				if (noun hasnt openable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Disrobe, Wear:
				if (noun == nothing or player or self)			return false;
				if (noun hasnt clothing)						return false;
				<Exit self>; new_line;
				return false;
			Drop: !! TODO: Comprobar funcionamiento
				return false;
			Eat:
				if (noun hasnt edible)							return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Empty, Remove, Search, Take:
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			EmptyT: !! TODO: Comprobar funcionamiento
				if (ObjectIsUntouchable(noun, 1)) return false;
				if (self.out_of_reach(second)) { <Exit self>; new_line; }
				return false;
			! Enter:
			Exit:
				if (noun == nothing) <<Exit self>>;
			! GetOff:
			! Give:
			Go:
				if (noun == nothing or player or self)			return false;
				if (~~(noun ofclass CompassDirection))			return false;
				<Exit self>; new_line;
				return false;
			! GoIn:
			Insert, PutOn:
				if ((second == d_obj) || (player in second)) <<Drop noun>>;
				if (self.out_of_reach(second)) { <Exit self>; new_line; }
				return false;
			Lock, Unlock:
				if (noun hasnt lockable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			! Order:
			! Show:
			SwitchOff, SwitchOn:
				if (noun hasnt switchable)						return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Transfer: !! TODO: Comprobar funcionamiento
				if (noun notin player)							return false;
				return false;
			!! GROUP 3 ACTIONS: Output a message and stop at the "before" stage.
			! Answer:
			! Ask:
			! AskFor:
			Attack, Blow, LookUnder, Smell, Squeeze, Taste, Touch:
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			Burn:
				!! TODO: comprobaciones de noun y second
				return false;
			! Buy:
			Climb:
				if (noun has enterable) {
					if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				}
				return false;
			! Consult:
			! Fill:
			! Jump:
			! JumpOver:
			! Kiss:
			! LetGo:
			! Listen:
			! Mild:
			! No:
			! Pray:
			Pull, Push, Turn: !! TODO: Comprobar funcionamiento
				! if (noun has scenery or static or concealed)	return false;
				if (self.out_of_reach(noun)) { <Exit self>; new_line; }
				return false;
			! PushDir
			! Receive
			! Rub
			! Set
			! SetTo
			! Swim
			! Swing
			! Tell
			! Wake
			! WakeOther
			! Wave
			! WaveHands
			!! CUSTOM ACTIONS
			! Dance:
			! GoDown:
			! GoUp:
			! KnockOn:
			! Masturbate:
			! Sit:
			! SleepWith:
			StandUp:
				if (noun == nothing) <<Exit self>>;
			! TalkTo:
			! Untie:
			! Use:
		],
		out_of_reach [ obj;
			if (obj == nothing or player or self)	return false;
			if (IndirectlyContains(self, obj))		return false;
			if (IndirectlyContains(player, obj))	return false;
			return true;
		],
 has	enterable;


!!==============================================================================
!!	LIMBO: En algún lugar
!!------------------------------------------------------------------------------

Room	LIMBO "En algún lugar"
 with	name	'limbo' 'lugar' 'sueno' 'vacio',
		clarification "",
		description [; return O__M(self, 1); ];

!!	<>	El atributo 'general' se activa tras imprimir el primer mensaje en la 
!!		rutina 'react_after'.
Object	HelpSystem "(Help System)"
 with	!! Indica si el tutorial está activado
		is_active [; return self.on_flag; ], 
		!! Activa el tutorial
		activate [; 
			self.activate_next_flag();
			self.on_flag = true;
		], 
		!! Desactiva el tutorial
		deactivate [; self.on_flag = false; ], 
		!! Cambia el estado del tutorial
		toggle_state [; 
			if (self.is_active()) self.deactivate();
			else self.activate();
		], 
		!! Indica si el tutorial ha terminado o no
		has_ended [; return self.end_flag; ], 
		!! Imprime el mensaje por defecto
		print_default_clue [; return self.default_clue_a(); ], 
		found_in [;
			return true;
		], 
		each_turn [ flag;
			if (self hasnt on || ~~self.is_active()) {
				return false;
			}
			!! Inicio del tutorial
			if (self.start_clue_flag && ~~self.start_clue_printed) {
				self.start_clue_flag = false;
				self.start_clue_printed = true;
				self.activate_next_flag();
				if (~~flag) new_line;
				return self.start_clue_a();
			}
			!! Acción ##Look
			if (self.look_clue_flag && ~~self.look_clue_printed) {
				if (~~flag) new_line;
				return self.look_clue_a();
			}
			!! Acción ##RemarkableObjs
			if (self.remarkableObjs_clue_flag
				&& ~~self.remarkableObjs_clue_printed) {
				if (~~flag) new_line;
				return self.remarkableObjs_clue_a();
			}
			!! Acción ##Examine
			if (self.examine_clue_flag && ~~self.examine_clue_printed) {
				if (~~flag) new_line;
				if (HABITACION.has_light_flag()) {
					return self.examine_clue_a(ropa);
				} else {
					return self.examine_clue_a(cortinas);
				}
			}
			!! Acción ##Open
			if (self.open_clue_a_flag && ~~self.open_clue_a_printed) {
				if (~~flag) new_line;
				return self.open_clue_a();
			}
			if (self.open_clue_b_flag && ~~self.open_clue_b_printed) {
				if (~~flag) new_line;
				return self.open_clue_b();
			}
			!! Acción ##Take
			if (self.take_clue_flag && ~~self.take_clue_printed) {
				if (~~flag) new_line;
				if (~~IndirectlyContains(player, ropa))
					return self.take_clue_a(ropa);
				return self.take_clue_a(maleta);
			}
			!! Acción #Inv
			if (self.inv_clue_flag && ~~self.inv_clue_printed) {
				if (~~flag) new_line;
				return self.inv_clue_a();
			}
			!! Acción #Go
			if (self.go_clue_flag && ~~self.go_clue_printed) {
				if (~~flag) new_line;
				return self.go_clue_a();
			}
			!! Meta acciones
			if (self.meta_clue_flag && ~~self.meta_clue_printed) {
				self.meta_clue_flag = false;
				self.meta_clue_printed = true;
				self.end_flag = true; !! XXX - Marca el final del tutorial
				if (~~flag) new_line;
				return self.meta_clue_a();
			}
		], 
		react_before [;
			Examine:
				if (~~self.is_active()) {
					return false;
				}
				if (~~self.examine_clue_printed) {
					self.examine_clue_printed = true;
					self.examine_clue_b();
					new_line;
				}
				if (self.examine_clue_flag) {
					self.examine_clue_flag = false;
					self.activate_next_flag();
					give self ~on;
					StopTimer(self);
					StartTimer(self, 3);
				}
			Go:
				if (~~self.is_active()) {
					return false;
				}
				if (~~self.go_clue_printed) {
					self.go_clue_printed = true;
					self.go_clue_b();
					new_line;
				}
				if (self.go_clue_flag) {
					self.go_clue_flag = false;
					self.activate_next_flag();
					give self ~on;
					StopTimer(self);
					StartTimer(self, 3);
				}
			Inv:
				if (~~self.is_active()) {
					return false;
				}
				if (~~self.inv_clue_printed) {
					self.inv_clue_printed = true;
					self.inv_clue_b();
					new_line;
				}
				if (self.inv_clue_flag) {
					self.inv_clue_flag = false;
					self.activate_next_flag();
					give self ~on;
					StopTimer(self);
					StartTimer(self, 3);
				}
			Look:
				if (~~self.is_active()) {
					return false;
				}
				if (~~self.look_clue_printed) {
					self.look_clue_printed = true;
					self.look_clue_b();
					new_line;
				}
				if (self.look_clue_flag) {
					self.look_clue_flag = false;
					self.activate_next_flag();
					give self ~on;
					StopTimer(self);
					StartTimer(self, 3);
				}
			Open:
				if (noun == cortinas) {
					if (~~self.open_clue_a_printed) 
						self.open_clue_a_printed = true;
					if (~~self.open_clue_b_printed)
						self.open_clue_b_printed = true;
					if (self.open_clue_a_flag || self.open_clue_b_flag) {
						self.open_clue_a_flag = false;
						self.open_clue_b_flag = false;
						self.activate_next_flag();
						give self ~on;
						StopTimer(self);
						StartTimer(self, 3);
					}
				}
			Take:
				if (~~self.is_active()) {
					return false;
				}
				if (~~self.take_clue_printed) {
					self.take_clue_printed = true;
					self.take_clue_b();
					new_line;
				}
				if (self.take_clue_flag) {
					self.take_clue_flag = false;
					self.activate_next_flag();
					give self ~on;
					StopTimer(self);
					StartTimer(self, 3);
				}
			Use:
				if (~~self.use_clue_printed) {
					self.use_clue_printed = true;
					self.use_clue_a();
					new_line;
				}
		], 
		react_after [;
			if (self hasnt general) {
				give self general;
				new_line;
				return O__M(self, 1);
			}
		], 
		time_left, 
		time_out [; give self on; ], 
		print_hesitate_clue [;
			if (self.hesitate_clue_printed) return true;
			self.hesitate_clue_printed = true;
			new_line;
			self.hesitate_clue_a();
		],
		print_remarkableObjs_clue [;
			if (self.remarkableObjs_clue_printed) return true;
			self.remarkableObjs_clue_printed = true;
			if (self.is_active()) {
				self.remarkableObjs_clue_flag = false;
				self.activate_next_flag();
				give self ~on;
				StopTimer(self);
				StartTimer(self, 2);
				self.remarkableObjs_clue_b();
				new_line;
			}
		], 
 private
		!! Atributo que indica si el tutorial está activado
		on_flag false, 
		!! Atributo que indica si el tutorial ha terminado
		end_flag false, 
		!! Activa la siguiente señal de pista no mostrada del tutorial
		activate_next_flag [;
			if (~~self.start_clue_printed) {
				self.start_clue_flag = true;
				return true;
			}
			if (~~self.look_clue_printed) {
				self.look_clue_flag = true;
				return true;
			}
			if (~~self.remarkableObjs_clue_printed) {
				self.remarkableObjs_clue_flag = true;
				return true;
			}
			if (~~self.examine_clue_printed) {
				self.examine_clue_flag = true;
				return true;
			}
			if (~~self.open_clue_a_printed) {
				self.open_clue_a_flag = true;
				return true;
			}
			if (~~self.open_clue_b_printed) {
				self.open_clue_b_flag = true;
				return true;
			}
			if (~~self.take_clue_printed) {
				self.take_clue_flag = true;
				return true;
			}
			if (~~self.inv_clue_printed) {
				self.inv_clue_flag = true;
				return true;
			}
			if (~~self.go_clue_printed) {
				self.go_clue_flag = true;
				return true;
			}
			if (~~self.meta_clue_printed) {
				self.meta_clue_flag = true;
				return true;
			}
		], 
		!! Inicio del tutorial
		start_clue_printed false, 
		start_clue_flag false, 
		start_clue_a [; return O__M(self, 2); ], 
		!! Acción ##Look
		look_clue_printed false, 
		look_clue_flag false, 
		look_clue_a [; return O__M(self, 3); ], 
		look_clue_b [; return O__M(self, 4); ], 
		!! Acción #RemarkableObjs
		remarkableObjs_clue_printed false, 
		remarkableObjs_clue_flag false, 
		remarkableObjs_clue_a [; return O__M(self, 5); ],
		remarkableObjs_clue_b [; return O__M(self, 6); ], 
		!! Acción ##Examine
		examine_clue_printed false, 
		examine_clue_flag false, 
		examine_clue_a [ obj; return O__M(self, 7, obj); ], 
		examine_clue_b [; return O__M(self, 8); ], 
		!! Acción ##Open
		open_clue_a_printed false, 
		open_clue_a_flag false, 
		open_clue_a [; return O__M(self, 9); ], 
		open_clue_b_printed false, 
		open_clue_b_flag false, 
		open_clue_b [; return O__M(self, 10); ], 
		!! Acción ##Take / ##Drop
		take_clue_printed false, 
		take_clue_flag false, 
		take_clue_a [ obj; return O__M(self, 11, obj); ], 
		take_clue_b [; return O__M(self, 12); ], 
		!! Acción ##Inv
		inv_clue_printed false, 
		inv_clue_flag false, 
		inv_clue_a [; return O__M(self, 13); ], 
		inv_clue_b [; return O__M(self, 14); ], 
		!! Acción ##Go
		go_clue_printed false, 
		go_clue_flag false, 
		go_clue_a [; return O__M(self, 15); ], 
		go_clue_b [; return O__M(self, 16); ], 
		!! Muestras de duda
		hesitate_clue_printed false, 
		hesitate_clue_a [; return O__M(self, 17); ], 
		!! Meta-acciones
		meta_clue_printed false, 
		meta_clue_flag false, 
		meta_clue_a [; return O__M(self, 18); ], 
		!! Acción ##Use
		use_clue_printed false, 
		use_clue_a [; return O__M(self, 19); ], 
		!! Acción ##FireAt
		fireAt_clue_printed false, 
		fireAt_clue_a [; return O__M(self, 20); ], 
		!! Acción ##TalkTo
		talkTo_clue_printed false, 
		talkTo_clue_a [; return O__M(self, 21); ], 
		talkTo_clue_b [; return O__M(self, 22); ], 
		!! Final del tutorial
		default_clue_a [; return O__M(self, 23); ], 
 has	on scenery;

Atrezzo	"paredes" 
 with	found_in HABITACION CAFE, 
		name_m	'muro',
		name_mp	'muros',
		name_f	'pared' 'esquina',
		name_fp	'paredes' 'esquinas',
		gender	G_FEMENINO + G_PLURAL,
		adjectives
			'amarillenta' 'amarillentas' 'amarillento' 'amarillentos' 'blanca' 
			'blancas' 'blanco' 'blancos',
		description [; switch ( GRAMMATICAL_INFLECTION ) {
			1,2,3: "No se observa nada digno de mención en ", (the) self, ".";
			4,5,6: "No se observaba nada digno de mención en ", (the) self, ".";
		}],
		before [;
			Examine:
				return false;
			default:
				switch (GRAMMATICAL_INFLECTION) {
					1, 2, 3: "No hace falta preocuparse por eso.";
					4, 5, 6: "No hacía falta preocuparse por eso.";
				}
		], 
 has	female pluralname;


