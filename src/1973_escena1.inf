

!!==============================================================================
!!
!!	PROYECTO 1973
!!	Escena 1: Habitación de Gabriel
!!
!!==============================================================================
!!
!!	File:			1973_escena1.inf
!!	Author(s):		J. Francisco Martín (jfm.lisaso@gmail.com)
!!	Languague:		ES (Castellano)
!!	System:			Inform, INFSP 6
!!	Platform:		Z-Machine / GLULX
!!	Version:		1.0
!!	Released:		2014/02/01
!!
!!------------------------------------------------------------------------------
!!
!!	TODO:
!!
!!	<>	reproducción de audio de la escena
!!	<>	objeto: amanecer
!!
!!------------------------------------------------------------------------------
!!
!!	Copyright (c) 2014, J. Francisco Martín
!!
!!	This file is part of PROYECTO 1973.
!!
!!	PROYECTO 1973 is free software: you can redistribute it and/or modify 
!!	it under the terms of the GNU General Public License as published by 
!!	the Free Software Foundation, either version 3 of the License, or 
!!	(at your option) any later version.
!!
!!	PROYECTO 1973 is distributed in the hope that it will be useful, 
!!	but WITHOUT ANY WARRANTY; without even the implied warranty of 
!!	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the 
!!	GNU General Public License for more details.
!!
!!	You should have received a copy of the GNU General Public License 
!!	along with PROYECTO 1973. If not, see <http://www.gnu.org/licenses/>.
!!
!!------------------------------------------------------------------------------


!!==============================================================================
!!	HABITACION: En la habitación
!!------------------------------------------------------------------------------
!! Secuencia de reproducción musical:
!!
!!	1.	Tocar TRACK_1_EXPOSITION, sin repeticiones, con FLAG_SOUND_NOTIFY:
!!		Damusix.AsignarCanal(TRACK_1_EXPOSITION, 0, -1, 1);
!!		Damusix.Tocar(TRACK_1_EXPOSITION, 1);
!!
!!	2.	Tocar TRACK_1_ACTION, con repeticiones:
!!		Damusix.AsignarCanal(TRACK_1_ACTION, 0, -1, -1);
!!		Damusix.Tocar(TRACK_1_ACTION, 1);
!!
!!	3.	Cambiar repeticiones de TRACK_1_ACTION):
!!		Damusix.Repeticion(TRACK_1_ACTION, 1);
!!
!!	4.	Tocar TRACK_1_DENOUEMENT, sin repeticiones, con FLAG_SOUND_NOTIFY:
!!		Damusix.AsignarCanal(TRACK_1_DENOUEMENT, 0, -1, 1);
!!		Damusix.Tocar(TRACK_1_DENOUEMENT, 1);
!!------------------------------------------------------------------------------

Room	HABITACION
 with	name	'alcoba' 'alojamiento' 'apartamento' 'aposento' 'casa' 'cuarto' 
				'dormitorio' 'estancia' 'habitacion' 'morada' 'vivienda', 
		short_name " ", 
		initial [; if (self hasnt visited) {
			!! Inicializaciones de la escena -----------------------------------
			SetGrammaticalInflection(THIRD_PERSON_PRESENT);
			if (flowers == nothing) flowers = GetFlowerType();
			!! Fragmento -------------------------------------------------------
			#Ifdef TARGET_ZCODE;
			box	""
				" Te ha dolido, ¿verdad?, dijo el chico.           "
				" Si.                                              "
				" ¿Eres muy valiente?                              "
				" Regular.                                         "
				" ¿Qué es lo más valiente que has hecho?           "
				" Escupió en la carretera una flema sanguinolenta. "
				" Levantarme esta mañana, dijo.                    "
				""
				"                                   CORMAC MCCARTY "
				"                                   The Road, 2006 "
				"";
			PressAnyKey();
			EraseWindow();
			box	""
				" Te ha dolido, ¿verdad?, dijo el chico.           "
				" Si.                                              "
				" ¿Eres muy valiente?                              "
				" Regular.                                         "
				" ¿Qué es lo más valiente que has hecho?           "
				" Escupió en la carretera una flema sanguinolenta. "
				" Levantarme esta mañana, dijo.                    "
				""
				"                                   CORMAC MCCARTY "
				"                                   The Road, 2006 "
				"";
			print (parser) "Pulsa una tecla para empezar";
			PressAnyKey();
			EraseWindow();
			#Ifnot; ! TARGET_GLULX;
			monospaced_style();
			print "@<<Te ha dolido, ¿verdad?, dijo el chico.^";
			print "Si.^";
			print "¿Eres muy valiente?^";
			print "Regular.^";
			print "¿Qué es lo más valiente que has hecho?^";
			print "Escupió en la carretera una flema sanguinolenta.^";
			print "Levantarme esta mañana, dijo.@>>^";
			new_line;
			print "-- CORMAC MCCARTY, The Road";
			roman_style();
			PressAnyKey();
			EraseWindow();
			#Endif; ! TARGET_
			!! Inicializaciones multimedia -------------------------------------
			#Ifdef TARGET_GLULX;
			Damusix.AsignarCanal(WOUNDED_A, 0, -1, 1);
			Damusix.AsignarCanal(WOUNDED_B, 1, -1, -1);
			Damusix.AsignarCanal(WOUNDED_C, 2, -1, 1);
			Damusix.Tocar(WOUNDED_A, 1);
			next_track = WOUNDED_B;
			ShowGraphicWindow();
			graphicWindow.setImage(PIC_1_01);
			#Endif; ! TARGET_GLULX;
			!! Introducción ----------------------------------------------------
			O__M(self, 1);
			PressAnyKey();
			new_line;
			self.short_name = "En la habitación";
			DrawStatusLine();
			return true;
		}], 
		description [;
			if (self.light_flag)
				return O__M(self, 4);
			else if (self.description_flag)
				return O__M(self, 3);
			else {
				self.description_flag = true;
				return O__M(self, 2);
			}
		], 
		before [;
			Listen:
				print "Desde el exterior llega el eco";
				if (~~self.light_flag)
					print " distante y apagado";
				" de motores.";
			Smell:
				if (self.light_flag)
					"El aire que se cuela por la ventana es fresco y fragante.";
				else if (self.smell_flag)
					"Huele al sudor empapado entre las sábanas.";
				else {
					self.smell_flag = true;
					return O__M(self, 5);
				}
		], 
		e_to [;
			!! XXX - Se podrían llevar las siguientes comprobaciones, o parte 
			!! de ellas, al código de los objetos involucrados (haciendo uso de 
			!! sus rutinas react_before). Sin embargo, parece buena idea 
			!! mantener juntas en el código restricciones similares, y además 
			!! así se consigue más control sobre el orden en que se verifican.
			if (~~self.light_flag)
				"Con la habitación a oscuras no acierta a alcanzar ", 
				(the) puerta_habitacion, ".";
			if (ropa notin player || ropa hasnt worn)
				"Será mejor que se vista antes. No tiene ninguna intención de 
				pasearse por ahí desnudo.";
			if (~~IndirectlyContains(player, maleta)) {
				PronounNotice(maleta);
				"No puede dejarse la maleta aquí.";
			}
			if (puerta_habitacion hasnt open) {
				<Open puerta_habitacion>;
				new_line;
			}
			if (~~IndirectlyContains(player, billete)) {
				if (~~self.exit_flag) {
					self.exit_flag = true;
					return O__M(self, 6);
				}
				!! TODO - repasar texto
				print_ret (string) random (
					"Antes tiene que encontrar el billete. Lo necesita. Sin él 
					no podrá llegar muy lejos.", 
					"Necesita el billete. Sabe que lo escondió por aquí, en 
					alguna parte. Tiene que encontrarlo antes de ponerse en 
					camino."
				);
			}
			!! Todas las restricciones han sido satisfechas:
			return puerta_habitacion;
		], 
		out_to [;
			return self.e_to();
		],
		cant_go
			"No puede ir por ahí. La puerta es la única salida de la 
			habitación.", 
		inhibit_object_list true, 
		!! Establece si la habitación está o no iluminada.
		set_light_flag [ status;
			if (status == true) {
				give oscuridad general;
				move oscuridad to LIMBO;
				give cortinas ~remarkable;
				give cama ~concealed;
				give cama remarkable;
				give escritorio remarkable;
				give puerta_habitacion remarkable;
				give ropa remarkable;
				give revolver remarkable;
				give maleta remarkable;
				give libro_bolsillo remarkable;
				give billete remarkable;
				self.light_flag = true;
				self.inhibit_object_list = false;
			}
			if (status == false) {
				give cortinas remarkable;
				give cama concealed;
				give cama ~remarkable;
				give escritorio ~remarkable;
				give puerta_habitacion ~remarkable;
				if (~~IndirectlyContains(player, ropa))
					give ropa ~remarkable;
				if (~~IndirectlyContains(player, revolver))
					give revolver ~remarkable;
				if (~~IndirectlyContains(player, maleta))
					give maleta ~remarkable;
				if (~~IndirectlyContains(player, libro_bolsillo))
					give libro_bolsillo remarkable;
				if (~~IndirectlyContains(player, billete))
					give billete remarkable;
				move oscuridad to HABITACION;
				give oscuridad ~general;
				self.light_flag = false;
				self.inhibit_object_list = true;
			}
		], 
		!! Indica si su atributo 'light_flag' es o no verdadero.
		has_light_flag [; return self.light_flag; ], 
 private
		description_flag false,	! indica si el objeto ha sido descrito
		exit_flag false,		! indica si el jugador ha intentado salir
		light_flag false, 		! indica si está iluminado
		smell_flag false, 		! indica si ha sido olido
;

!!------------------------------------------------------------------------------
!! Objetos con rutinas react_before:

!!	<>	TODO - Nueva acción: hacer la cama
Furniture	cama "cama" HABITACION
 class	SmartEnterable
 with	name_m	'camastro' 'catre' 'colchon' 'jergon' 'lecho' 'mobiliario' 
				'moblaje' 'mueble' 'somier', 
		name_f	'cama' 'piltra',
		name_mp	'muebles',
		gender	G_FEMENINO,
		adjectives 'desecho' 'desecha' 'sin' 'hacer',
		!! La propiedad 'clarification' se encarga de imprimir un mensaje 
		!! personalizado junto al título de la localidad cuando el jugador se 
		!! encuentra en un objeto.
		clarification "sentado en la cama", 
		describe [ obj i;
			if (child(self) == nothing)
				return true;
			!! Listado de objetos que hay sobre la cama:
			objectloop(obj in self)
				if (obj ~= player && obj hasnt scenery or concealed)
					i++;
			if (i == 0)
				return true;
			if (i == 1 && ropa in self)
				"^Tiene la ropa hecha un rebujo sobre la cama.";
			print "^Sobre la cama puede ver ";
			WriteListFrom(child(self), CONCEAL_BIT + ENGLISH_BIT + PARTINV_BIT);
			".";
		], 
		description [ obj i;
			print "Tiene las sábanas arrugadas y empapadas en sudor.";
			!! Listado de objetos que hay sobre la cama:
			objectloop(obj in self)
				if (obj ~= player && obj hasnt scenery or concealed)
					i++;
			if (i > 0) {
				print " Sobre ella puede ver también ";
				WriteListFrom(child(self), CONCEAL_BIT + ENGLISH_BIT);
				print ".";
			}
			new_line;
			return true;
		], 
		react_before [;
			if (self.SmartEnterable::react_before()) return true;
			Jump:
				if (player in self && noun == nothing) <<Exit self>>;
			Sit:
				if (noun == nothing) <<Sit self>>;
			Sleep:
				if (noun == nothing) <<Sleep self>>;
			Swing:
				if (player in self && noun == nothing) <<Swing self>>;
		], 
		before [;
			Climb:
				<<Enter self>>;
			Iron:
				"Hoy no necesita preocuparse por hacer la cama.";
			JumpOver:
				if (~~self.jumpOver_flag) {
					self.jumpOver_flag = true;
					move player to parent(self);
					return O__M(self, 1);
				}
				"Ahora no hay tiempo para juegos. Tiene que salir de aquí.";
			LookUnder:
				"Bajo la cama sólo hay unos cuantos papeles más, inservibles y 
				semiocultos por las sombras y el polvo.";
			Sit:
				if (player in self) "Ya estaba sentado en ", (the) self, ".";
				<<Enter self>>;
			Sleep:
				"Ahora no es momento de dormir. Tiene que salir de aquí.";
			Smell:
				"De entre las sábanas se levanta el ligero hedor del sudor.";
			StandUp:
				if (player in self) <<Exit self>>;
			Swing:
				<<JumpOver self>>;
		], 
		after [ i obj;
			Enter:
				"Se sienta en ", (the) self, ".";
			Exit:
				if (~~self.standUp_flag) {
					self.standUp_flag = true;
					"Aparta las sábanas a un lado y se levanta ",(del) self,".";
				}
				"Se levanta ", (del) self, ".";
			!! Tras coger o colocar objetos de la cama, se comprueba si encima 
			!! de ella hay algún objeto relevante (que no tenga el atributo 
			!! scenery o concealed). Si no los hay, la cama tiene el atributo 
			!! concealed y es la descripción de la localidad la que se encarga 
			!! de hacer mención a ella. Si los hay, deja de tener el atributo 
			!! concealed, para que la librería imprima un mensaje descriptivo 
			!! listando aquellos objetos que tiene encima.
			LetGo, Receive:
				objectloop(obj in self)
					if (obj ~= player && obj hasnt scenery or concealed) i++;
				if (i == 0) give self concealed;
				else give self ~concealed;
		], 
 private
		jumpOver_flag false,	! indica si Gabriel ha saltado sobre la cama
		standUp_flag false, 	! indica si Gabriel se ha levantado de la cama
 has	concealed female supporter;

!!	<>	El atributo 'general' se activa para evitar las comprobaciones que hay 
!!		en la rutina react_before del objeto.
Atrezzo	oscuridad "oscuridad" HABITACION
with	name_f	'lobreguez' 'negrura' 'oscuridad' 'penumbra' 'tenebrosisdad', 
		name_fp	'penumbra' 'sombras' 'tinieblas', 
		gender	G_FEMENINO, 
		article	"la", 
		adjectives
			'absoluta' 'absolutas' 'densa' 'densas' 'espesa' 'espesas' 
			'impenetrable' 'impenetrables' 'inescrutable' 'inescrutables' 
			'insondable' 'insondables', 
		description [;
			return O__M(self, 1);
		], 
		react_before [;
			if (self has general)
				return false;
			Blow, Listen, Rub, SetTo, Smell, Taste, Touch:
				if (noun == nothing or player or self)
					return false;
				if (IndirectlyContains(player, noun))
					return false;
				if (noun == cama)
					return false;
				if (noun == cortinas)
					return false;
				"No acierta a dar con ", (the) noun, " en la oscuridad.";
			Close:
				if (noun hasnt openable)
					return false;
				if (noun == cortinas)
					return false;
				if (noun hasnt open)
					"En la oscuridad de la habitación no es capaz de dar con ", 
					(the) noun, ".";
				"Está todo tan oscuro que no es capaz de acertar a cerrar ", 
				(the) noun, ".";
			Consult, Examine, Look, LookUnder, Read, Search:
				if (noun == nothing or player or self)
					return false;
				if (noun == HABITACION)
					return false;
				if (noun == cortinas)
					return false;
				return O__M(self, 2);
			Dance:
				"Decide que no es buena idea ponerse a bailar por la habitación 
				a oscuras.";
			Empty, EmptyT, Insert, PutOn, Remove, Transfer:
				if (noun hasnt supporter or container)
					return false;
				if (IndirectlyContains(player, noun))
					return false;
				if (second ~= nothing && IndirectlyContains(player, second))
					return false;
				"Con la habitación a oscuras no acierta a dar con ", 
				(the) noun, ".";
			Jump, JumpOver:
				"Decide que no es buena idea ponerse a saltar a oscuras.";
			Lock, Unlock:
				if (noun hasnt lockable)
					return false;
				if (IndirectlyContains(player, noun))
					return false;
				"A oscuras no es capaz de dar con ", (the) noun, ".";
			Open:
				if (noun hasnt openable)
					return false;
				if (noun == cortinas)
					return false;
				if (noun has open)
					"En la oscuridad de la habitación no es capaz de dar con ", 
					(the) noun, ".";
				"Está todo tan oscuro que no es capaz de acertar a abrir ", 
				(the) noun, ".";
			Pull, Push, PushDir, Take:
				if (noun has scenery or static)
					return false;
				if (noun == nothing or player)
					return false;
				if (IndirectlyContains(player, noun))
					return false;
				"No acierta a dar con ", (the) noun, " en la oscuridad.";
			Swing:
				"Decide que no es buena idea andar columpiándose por ningún 
				lado con la habitación a oscuras.";
			Wear:
				if (noun == ropa)
					"Intenta ponerse la ropa, pero no acierta a dar con ella 
					en la oscuridad.";
		], 
		before [;
			Consult, Examine, Look:	return self.description();
			!! "No es necesario referirse a eso para terminar la historia."
			default: L__M(##Miscellany, 39); return true;
		],
 has	female;


!!------------------------------------------------------------------------------
!! Atrezzo:

!!	<>	El atributo 'general' se activa al abrir el objeto por primera vez.
Atrezzo	cortinas "cortinas" HABITACION
 with	name_m	'cortinaje' 'ventanal' 'visillo',
		name_mp	'cortinajes' 'visillos', 
		name_f	'colgadura' 'cortina' 'persiana' 'ventana', 
		name_fp	'colgaduras' 'cortinas' 'persianas', 
		gender	G_FEMENINO + G_PLURAL,
		adjectives
			'abierta' 'abiertas' 'abierto' 'abiertos' 'cerrada' 'cerradas' 
			'cerrado' 'cerrados' 'tela',
		description [;
			if (self has open) return O__M(self, 2);
			else return O__M(self, 1);
		], 
		react_before [; 
			Yes:
				if (self has on)
					<<Close self>>;
		],
		before [;
			Close:
				if (self hasnt open) {
					return false;
				}
				if (self hasnt on) {
					StartTimer(self, 1);
					give self on;
					"¿Y dejar la habitación de nuevo a oscuras?";
				}
				return false;
		], 
		after [ flag;
			Close:
				HABITACION.set_light_flag(false);
				print (string) random(
					"Corre las cortinas de nuevo.^", 
					"Cierra las cortinas.^", 
					"Cierra las cortinas otra vez.^", 
				);
				new_line;
				<<Look>>;
			Open:
				HABITACION.set_light_flag(true);
				if (self has general) {
					print (string) random(
						"Descorre las cortinas de nuevo.^", 
						"Abre las cortinas.^", 
						"Abre las cortinas otra vez.^", 
					);
					new_line;
					<<Look>>;
				}
				else {
					give self general;
					O__M(self, 3);
					PressAnyKey();
					new_line;
					!! XXX
					if (HelpSystem.is_active()) {
						flag = true;
						HelpSystem.deactivate();
					}
					<Look>;
					if (flag) {
						HelpSystem.activate();
					}
					return true;
				}
		],
		time_left, 
		time_out [; give self ~on; ], 
 has	female openable pluralname remarkable;

Atrezzo	puerta_habitacion "puerta" HABITACION
 with	name_m	'paso' 'porton', 
		name_f	'entrada' 'puerta' 'salida', 
		gender	G_FEMENINO, 
		adjectives
			'abierta' 'abierto' 'blanca' 'blanco' 'cerrada' 'cerrado' 'madera' 
			'pintada' 'pintado' 'sencilla' 'sencillo', 
		description [;
			if (self has open) "Está abierta de par en par.";
			"De madera pintada en blanco. Tiene colgado un colorido calendario 
			de pared por detrás.";
		], 
		react_before [;
			Yes:
				if (self has on)
					<<Exit self>>;
		], 
		after [;
			Close:
				"Al cerrarla deja al descubierto un calendario que tiene 
				colgado detrás.";
			Open:
				"La puerta se abre con un ligero crujir de goznes.";
		],
		door_dir out_to, 
		door_to [;
			if (self hasnt on) {
				StartTimer(self, 3);
				give self on;
				O__M(self, 1);
				HelpSystem.print_hesitate_clue();
				return true;
			}
			O__M(self, 2);
			PressAnyKey();
			!!------------------------------------------------------------------
			!! TODO - Quitar de la versión final
			#Ifdef DEMO_RELEASE;
			new_line;
			HorizontalRule();
			new_line;
			print (parser) "Fin de la demostración.";
			PressAnyKey();
			@restart; L__M(##Restart, 2);
			#Endif; ! DEMO_RELEASE;
			!!------------------------------------------------------------------
			new_line;
			return CAFE;
		], 
		time_left, 
		time_out [; give self ~on; ], 
 has	door female ~open openable transparent;

!! TODO - nombres y adjetivos
Atrezzo	calendario "calendario de pared" puerta_habitacion
 with	name_m	'almanaque' 'anuario' 'calendario' 'cuadro' 'dibujo' 'bodegon', 
		name_f	'pintura', 
		name_mp	'claveles', 
		name_fp	'flores', 
		gender	G_MASCULINO, 
		adjectives
			'colorida' 'colorido' 'floral' 'pared', 
		description [;
			O__M(self, 1);
			!! TODO - Eliminar de la versión final
			if (self.fire_count == 1)
				"^Tiene un agujero de bala.";
			if (self.fire_count > 1)
				"^Tiene ", (number) self.fire_count, " agujeros de bala.";
		], 
		react_before [;
			FireAt:
				if (noun == nothing or puerta_habitacion)
					<<FireAt self>>;
		],
		before [ result;
			Close, Open:
				"Ya está bien como está.";
			Examine:
				if (parent(self) has open) {
					give parent(self) ~open;
					print "Cierra la puerta para ver mejor el calendario que 
					tiene colgado detrás.^";
					new_line;
					return false;
				}
			FireAt:
				if (CheckFireAtConditions(second)) {
					print "Aunque sabe que no debería hacerlo es incapaz de 
					controlar el impulso. Con decisión, levanta el revólver y 
					apunta a la puerta...";
					result = AimAndFire();
					revolver.ammo--;
					print " y dispara.^";
					new_line;
					if (result == -2) {
						result = random(1,2,2,3,3,3,4,5,6,7,8,9,10);
					}
					if (result == 0) {
						self.fire_count++;
						"La bala impacta directamente sobre la cuadrícula de días 
						del calendario.";
					}
					if (result == 1 or 2) {
						self.fire_count++;
						"El disparo alcanza al calendario.";
					}
					"Falla el disparo, que impacta sobre la pared.";
				}  else return true;
			Pull, Push, PushDir, Take:
				"Está enganchado a la puerta.";
		], 
		!! TODO - Eliminar de la versión final
		fire_count 0, 
 has	male;

Atrezzo	desorden "desorden absoluto" HABITACION
 with	name_m	'alboroto' 'bartulo' 'barullo' 'caos' 'cisco' 'desastre' 
				'desbarajuste' 'desconcierto' 'desorden' 'follon' 'jaleo' 
				'trasto' 'tumulto' 'vidrio',
		name_f	'confusion' 'desorganizacion' 'zarabanda', 
		name_mp	'bartulos' 'cristales' 'trastos' 'vidrios', 
		name_fp	'cosas', 
		gender	G_MASCULINO,
		adjectives
			'absoluto' 'completo' 'desencajados' 'desordenadas' 'desordenados' 
			'destrozada' 'destrozadas' 'destrozado' 'destrozados' 'diseminadas' 
			'diseminados' 'esparcidas' 'esparcidos' 'monton' 'montones' 'otras' 
			'otros' 'pila' 'pilas' 'rotas' 'rotos' 'tiradas' 'tirados' 'viejas',
		description [;
			if (~~self.description_flag) {
				self.description_flag = true;
				return O__M(self, 1);
			}
			return O__M(self, 2);
		], 
		before [;
			Examine:
				return false;
			Search:
				return false;
			default:
				"Ya no tiene sentido seguir preocupándose por eso. Tiene que 
				ponerse en marcha cuanto antes.";
		], 
 private
		description_flag false,	! indica si el objeto ha sido descrito
 has	male;

Atrezzo	papeles_habitacion "montón de papeles" HABITACION
 with	name_mp	'papeles', 
		name_fp	'hojas',
		gender	G_MASCULINO, 
		adjectives
			'arrugadas' 'arrugados' 'desordenadas' 'desordenado' 'desordenados' 
			'esparcidas' 'esparcidos' 'inservible' 'inservibles' 'monton' 
			'montones' 'pila' 'pilas' 'tiradas' 'tirados',
		description
			"Hay papeles tirados por todas partes. Arrugados e inservibles", 
		before [;
			Examine:
				return false;
			Search:
				return false;
			default:
				"Ya no tiene sentido seguir preocupándose por eso. Tiene que 
				ponerse en marcha cuanto antes.";
		],
 has	male;

Atrezzo	libros "libros tirados" HABITACION
 with	name_m	'cuaderno' 'ejemplar' 'libro' 'tomo' 'volumen',
		name_f	'libreta', 
		name_mp	'cuadernos' 'ejemplares' 'libros' 'tomos' 'volumenes',
		name_fp	'libretas', 
		gender	G_MASCULINO + G_PLURAL,
		adjectives
			'amontonado' 'amontonados' 'desordenado' 'desordenados' 'esparcido' 
			'esparcidos' 'tirado' 'tirados',
		description
			"Han vaciado las estanterías y todos sus libros están tirados por 
			el suelo de la habitación.",
		before [;
			Consult, Read, Search:
				print "Distraído, deja caer la mirada sobre algunos títulos: ";
				self.title_list();
				"... todos viejos libros que ya ha leído.";
			Examine, LookUnder, Smell, Touch:
				return false;
			default:
				print "Tiene que salir de aquí. Ahora no puede preocuparse 
				por ";
				SpanishNominativePronoun(self);
				".";
		],
		!! Imprime un listado aleatorio con títulos de libros ficticios. Los 
		!! títulos están basados en títulos de varios relatos interactivos:
		title_list [;
			!!	<>	"Afuera", de S. Armas
			!!	<>	"El extraño caso de Randolph Dwigth", de El Clérigo Urbatain
			!!	<>	"Alabaster", de E. Short (y otros)
			!!	<>	"Hitchhikers Guide to the Galaxy", de D. Adams y S. Meretzky
			!!	<>	"Interstate Zero", de A. Cadre
			!!	<>	"Photopia", de A. Cadre
			!!	<>	"Pronto", de J.A. Paz
			italic_style();
			print (string) random("Adentro", "El extraño caso del alabastro", 
			"Guía del autoestopista de la I/0", "Fotofobia", "Tarde");
			roman_style();
			print ", ";
			!!	<>	"The Shadow in the Cathedral", de J. Ingold y I. Finley
			!!	<>	"All Roads", de J. Ingold
			!!	<>	"Hierba tras el cristal", de J.A. Paz
			!!	<>	"Macetas", de S. Armas
			!!	<>	"Voices of Spoon River", de VV.AA.
			!!	<>	"Anchorhead", de M.S. Gentry
			!!	<>	"El museo de las consciencias", VV.AA.
			!!	<>	"Blue Chairs", de C. Klimas
			!!	<>	"City of secrets", de E. Short
			!!	<>	"Bronze", de E. Short
			!!	<>	"The reliques of Tolty-Aph", de G. Nelson
			!!	<>	Leyendas de Ci-U-Than, de Aventuras AD
			italic_style();
			print (string) random("The Shadow in the Road", "Hierba en las 
			macetas", "Voces del río Miskaton", "El museo de las sillas 
			azules", "City of Bronze", "Las reliquias de Ci-U-Than");
			roman_style();
			print ", ";
			!!	<>	"Negra Noche", de C.M. Aguirre
			!!	<>	"Blue Lacuna", de A.A. Reed
			!!	<>	"Los placeres de Megara", de X. Carrascosa
			!!	<>	"Amanda", de F.J. López
			!!	<>	"Heresville", de C. Sisí
			!!	<>	"El bibliotecario", de Depresiv
			!!	<>	"El libro que se aburría", de A. Visiedo
			!!	<>	"El edificio 25", de Jarel
			!!	<>	"1981", de A. Cadre
			italic_style();
			print (string) random("Negra laguna", "Los placeres de Amanda", 
			"Villa Geres", "El bibliotecario que se aburría", "El edificio 
			19-81");
			roman_style();
			print ", ";
			!!	<>	"Vespers", de J. Devlin
			!!	<>	"La venganza de Yan", de Jarel
			!!	<>	"El anillo", de J.A. Paz
			!!	<>	"Olvido Mortal", de A.V. Peláez
			!!	<>	"Shelter from the storm", de E. Eve
			!!	<>	"Nemesis Macana", de V. Gijsbers
			!!	<>	"El regalo de Gorbag", de X. Carrascosa
			!!	<>	"Galatea", de E. Short
			italic_style();
			print (string) random("Vísperas", "La venganza del anillo", 
			"Recuerdo vital", "Shelter from the Nemesis", "El regalo de 
			Galatea");
			roman_style();
			return true;
		], 
 has	male pluralname;

Atrezzo	"estanterías" HABITACION
 with	name_m	'anaquel' 'estante' 'pluteo',
		name_f	'balda' 'estanteria' 'repisa',
		name_mp	'anaqueles' 'estantes' 'pluteos',
		name_fp	'baldas' 'estanterias' 'repisas',
		gender	G_FEMENINO + G_PLURAL,
		adjectives 'vacia' 'vacias' 'vacio' 'vacio',
		before [;
			Examine, Search:
				<<Examine libros>>;
			default:
				print "Ya no tiene sentido que se preocupe por ";
				SpanishNominativePronoun(self);
				".";
		], 
 has	female pluralname;

Atrezzo	"almohada" cama
 with	name_m	'almohadon' 'cojin',
		name_f	'almohada',
		gender	G_FEMENINO,
		adjectives 'cama', 
		before [;
			Examine:
				"Yace sobre la cama de cualquier manera.";
			Search, LookUnder:
				"No hay nada interesante escondido ahí.";
			Smell:
				"Huele al sudor.";
			Take:
				"No l", (o) self, " necesita para nada.";
			default:
				"Ahora tiene cosas más importantes de las que preocuparse.";
		],
 has	female;

Atrezzo	"sábanas" cama
 with	name_f	'manta' 'sabana',
		name_fp	'mantas' 'sabanas',
		gender	G_FEMENINO + G_PLURAL,
		adjectives 'arrugada' 'arrugadas' 'deshecha' 'deshechas',
		before [;
			Enter, Sleep:
				<<Sleep cama>>;
			Examine:
				"Descansa",(n) self," sobre la cama ech",(o) self," un rebujo.";
			Iron:
				<<Iron cama>>;
			Search, LookUnder:
				"No hay nada escondido entre ", (the) self, ".";
			Smell:
				<<Smell cama>>;
			Take, Pull, Push, PushDir:
				"No l", (o) self, " necesita para nada.";
			default:
				"Ahora tiene cosas más importantes de las que preocuparse.";
		],
 has	female pluralname;

!!------------------------------------------------------------------------------
!! Furniture:

Furniture	escritorio "escritorio" HABITACION
 with	name_m	'escritorio' 'mobiliario' 'moblaje' 'mueble' 'pupitre', 
		name_f	'mesa', 
		name_mp	'muebles', 
		gender	G_MASCULINO,
		adjectives
			'madera' 'pequeno' 'pequena' 'oscuro' 'oscura',
		description [;
			print "Se trata de un funcional escritorio de madera oscura";
			if (child(self)) {
				print " sobre el que hay ";
				WriteListFrom(child(self), CONCEAL_BIT + ENGLISH_BIT);
			}
			print ". Tiene un único cajón, que en estos momentos está";
			if (cajon hasnt open) " cerrado.";
			print " abierto.";
			if (~~child(cajon)) " Dentro no hay nada.";
			print " Dentro alcanza a ver ";
			WriteListFrom(child(cajon), CONCEAL_BIT + ENGLISH_BIT);
			".";
		], 
		before [;
			Climb, Enter, Sit:
				"En realidad no tiene motivos para subirse ahí.";
			Close:
				<<Close cajon>>;
			Open:
				<<Open cajon>>;
			Pull, Push, PushDir, Take, Turn:
				print_ret (The) self, " pesa", (n) self, " demasiado para andar 
				moviéndol", (o) self, ".";
		], 
 has	male concealed supporter transparent;

Furniture	cajon "cajón" HABITACION
 class	Receptacle, 
 with	name_m	'cajon' 'cajoncillo' 'compartimento', 
		name_f	'gaveta',
		gender	G_MASCULINO, 
		adjectives 'escritorio', 
		description [; <<Search self>>; ], 
		before [;
			Pull: 
				<<Open self>>;
			Push:
				<<Close self>>;
			PushDir, Take, Turn:
				"Forma parte del escritorio.";
		],
		after [;
			Close:
				if (self.papers_inside) {
					move papeles_cajon to LIMBO;
					move papeles_habitacion to HABITACION;
				}
			Open:
				if (self.papers_inside) {
					move papeles_cajon to self;
					move papeles_habitacion to LIMBO;
				}
		],
		capacity_size 3,
 private
		papers_inside true, ! indica si hay papeles dentro del cajón
 has	male concealed container openable ~open;

Item	papeles_cajon "montón desordenado de papeles" LIMBO
 with	name_mp	'papeles', 
		name_fp	'hojas',
		gender	G_MASCULINO, 
		adjectives
			'arrugadas' 'arrugados' 'desordenadas' 'desordenado' 'desordenados' 
			'esparcidas' 'esparcidos' 'inservible' 'inservibles' 'monton' 
			'montones' 'pila' 'pilas' 'tiradas' 'tirados',
		description [;
			return O__M(self, 1);
		], 
		react_before [;
			Search:
				if (noun == cajon)
					<<Search self>>;
		],
		before [;
			Examine:
				return false;
			Search:
				<<Take self>>;
			Take, Transfer:
				move self to LIMBO;
				move papeles_habitacion to HABITACION;
				move libro_bolsillo to cajon;
				return O__M(self, 2);
			default:
				"Ya no tiene sentido seguir preocupándose por eso. Tiene que 
				ponerse en marcha cuanto antes.";
		],
 has	male;

!!------------------------------------------------------------------------------
!! Items:

!!	<>	El atributo 'general' se activa al vestir el objeto por primera vez.
!!	<>	TODO - Cuando la ropa está quitada
Item	ropa "ropa" cama
 class	Receptacle
 with	name_m	'abrigo' 'atuendo' 'bolsillo' 'chaqueton' 'gaban' 'pantalon' 
				'sobretodo' 'tejano' 'vaquero' 'vestuario',
		name_f	'camisa' 'camiseta' 'camisola' 'chaqueta' 'faltriquera' 
				'indumentaria' 'pelliza' 'prenda' 'ropa' 'vestimenta',
		name_mp	'atuendos' 'bolsillos' 'pantalones' 'tejanos' 'vaqueros',
		name_fp	'faltriqueras' 'prendas' 'vestimentas',
		gender	G_FEMENINO,
		article	"su", 
		!! TODO - Adjetivos
		parse_name [ word;
			word = NextWord();
			if (word == 'abrigo' or 'bolsillo' or 'bolsillos' or 'chaqueta' or 
				'chaqueton' or 'faltriquera' or 'faltriqueras' or 'gaban' or 
				'pelliza' or 'sobretodo')
				self.coat_flag = true;
			if (word == 'camisa' or 'camiseta' or 'camisola')
				self.shirt_flag = true;
			if (word == 'pantalon' or 'pantalones' or 'tejano' or 'tejanos' or 
				'vaquero' or 'vaqueros')
				self.trousers_flag = true;
			wn--;
			return -1;
		], 
		description [;
			if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT) {
				if (self.coat_flag) {
					O__M(self, 3);
					if (self in player && self has worn && child(self)) {
						print "^^En los bolsillos hay ";
						WriteListFrom(child(self), 
							ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT);
						".";
					}
					new_line;
					return true;
				} 
				if (self.shirt_flag)
					return O__M(self, 5);
				if (self.trousers_flag)
					return O__M(self, 7);
				O__M(self, 1);
				if (self in cama) " Está hecha un rebujo sobre la cama.";
				if (self in real_location) " Está hecha un rebujo en el suelo.";
				if (self in player && self has worn && child(self)) {
					print "^^En los bolsillos del abrigo hay ";
					WriteListFrom(child(self), 
						ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT);
					".";
				}
				new_line;
				return true;
			}
			else {
				if (self.coat_flag) {
					O__M(self, 4);
					if (self in player && self has worn && child(self)) {
						print "^^En los bolsillos había ";
						WriteListFrom(child(self), 
							ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT);
						".";
					}
					new_line;
					return true;
				} 
				if (self.shirt_flag)
					return O__M(self, 6);
				if (self.trousers_flag)
					return O__M(self, 8);
				O__M(self, 2);
				if (self in player && self has worn && child(self)) {
					print "^^En los bolsillos del abrigo había ";
					WriteListFrom(child(self), 
						ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT);
					".";
				}
				new_line;
				return true;
			}
		], 
		react_before [;
			DisrobeX:
				if (noun == nothing)
					<<Disrobe self>>;
			WearX:
				if (noun == nothing)
					<<Wear self>>;
		], 
		before [;
			!! TODO - Incluir mensajes diferentes para las diferentes prendas.
			Disrobe:
				if (self hasnt worn)
					return false;
				if (real_location == HABITACION)
					return false;
				if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
					"No piensa pasearse por ahí desnud", (o) player, ".";
				else
					"No pensaba pasearse por ahí desnud", (o) player, ".";
			Iron:
				if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
					"Nunca se ha preocupado demasiado por llevar la ropa 
					perfectamente planchada. No se iba a preocupar ahora.";
				else
					"Nunca se había preocupado demasiado por llevar la ropa 
					perfectamente planchada. No se iba a preocupar entonces.";
			Search:
				if (self hasnt worn) {
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"No encuentra nada interesante entre la ropa.";
					else
						"No encontró nada interesante entre la ropa.";
				}
				print "En los bolsillos lleva ";
				WriteListFrom(child(self),
					ENGLISH_BIT + RECURSE_BIT + FULLINV_BIT); 
				".";
		], 
		after [;
			!! Se reestablecen las variables de objetivo de la descripción:
			self.coat_flag = false;
			self.shirt_flag = false;
			self.trousers_flag = false;
			!! TODO - Estudiar si vaciar los bolsillos del abrigo al quitárselo.
			Disrobe:
				give self ~open;
				give self ~container;
				if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
					"Se quita ", (the) self, ".";
				else
					"Se quitó ", (the) self, ".";
			LetGo:
				if (~~keep_silent) {
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"Saca ", (the) noun, " de dentro del bolsillo.";
					else
						"Sacó ", (the) noun, " de dentro del bolsillo.";
				}
			Receive:
				if (~~keep_silent) {
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"Mete ", (the) noun, " dentro de uno de los bolsillos 
						del abrigo.";
					else
						"Metió ", (the) noun, " dentro de uno de los bolsillos 
						del abrigo.";
				}
			Take: 
				if (self hasnt moved) 
					"Recoge ", (the) self, " de encima de la cama."; 
			!! TODO - Si se vacían los bolsillos al desvestir, llenarlos.
			Wear:
				give self container;
				give self open;
				if (self hasnt general) {
					give self general;
					move revolver to self;
					return O__M(self, 9);
				}
				return false;
		], 
		!! Mensajes de error. Se producen al intentar meter en el contenedor 
		!! un objeto que viola alguno de los límites de capacidad definidos
		error_messages [ id obj;
			switch(id) {
				1:	!! Se intenta meter en el bolsillo un objeto cuyo peso 
					!! supera el límite permitido:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						print_ret (The) obj, " ", (es) obj, " demasiado pesad", 
						(o) obj, " como para guardarlo", (o) obj, " en uno de 
						los bolsillos del abrigo.";
					else
						print_ret (The) obj, " era", (n) obj, " demasiado 
						pesad", (o) obj, " como para guardarl", (o) obj, " en 
						uno de los bolsillos del abrigo.";
				2:	!! Se intenta meter en el bolsillo un objeto cuyo peso,
					!! en conjunto con el del resto de objetos que hay ya en el 
					!! bolsillo, supera el límite permitido:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"Los bolsillos del abrigo ya no soportan más peso.";
					else
						"Los bolsillos del abrigo ya no soportaban más peso.";
				3:	!! Se intenta meter en el bolsillo un objeto cuyo volumen 
					!! supera el límite permitido:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						print_ret (The) obj, " no cabe", (n) obj, " dentro del  
						bolsillo."; 
					else
						print_ret (the) obj, " no cabía", (n) obj, " dentro del 
						bolsillo.";
				4:	!! Se intenta meter en el bolsillo un objeto cuyo volumen, 
					!! en conjunto con el del resto de objetos que hay ya en el 
					!! bolsillo, supera el límite permitivo:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"En los bolsillos ya no queda hueco suficiente como 
						para meter ", (the) obj, ".";
					else
						"En los bolsillos ya no quedaba hueco suficiente como 
						para meter ", (the) obj, ".";
				5:	!! Se intenta meter en el bolsillo un objeto cuto tamaño 
					!! supera el límite permitido:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						print_ret (The) obj, " ", (es) obj, " demasiado 
						grande", (s) obj, " como para guardarl", (o) obj, " en 
						uno de los bolsillos del abrigo.";
					else
						print_ret (The) obj, " era", (n) obj, " demasiado 
						grande", (s) obj, " como para guardarl", (o) obj, " en 
						uno de los bolsillos del abrigo.";
				6:	!! Se intenta meter en el bolsillo un objeto tras haber 
					!! alcanzado el límite de objetos permitido:
					if (GRAMMATICAL_INFLECTION == THIRD_PERSON_PRESENT)
						"En el bolsillo ya no entran más cosas.";
					else
						"En el bolsillo ya no entraban más cosas.";
			}
		], 
		capacity_size 3, 
		size 4, 
 private
		coat_flag false, 
		shirt_flag false, 
		trousers_flag false, 
 has	clothing container female open;

!!	<>	TODO - abrir tambor
!!	<>	TODO - girar tambor
!!	<>	TODO - ampliar trasfondo del revólver
!!	<>	TODO - descarga revolver
!!	<>	TODO - vacia el cargador
Item	revolver "revólver" LIMBO
 with	name_m	'barrilete' 'canon' 'revolver' 'tambor', 
		name_f	'arma' 'cacha' 'culata' 'empunadura' 'pistola', 
		name_fp	'cachas', 
		gender	G_MASCULINO, 
		adjectives
			'amenazador' 'amenazadora' 'brillante' 'fria' 'frio' 'fuego' 
			'horrible' 'metal' 'metalica' 'metalico' 'pesada' 'pesado',
		description [;
			switch(self.ammo) {
				0: print "No le quedan balas";
				1: print "Le queda una sola bala";
				6: print "Tiene todas las balas ---las seis---";
				default: print "Le quedan ", (number) self.ammo, " balas";
			}
			" en el tambor.";
		], 
		!! Indica si el revólver se ha quedado sin balas.
		out_of_ammo [;
			return self.ammo < 1;
		],
		size 3, 
		ammo 6,		! numero de balas del revolver
 has	male;

Item	maleta "maleta de viaje" HABITACION
 with	name_m	'equipaje' 'maleton', 
		name_f	'maleta',
		gender	G_FEMENINO, 
		adjectives 'cuero' 'desgastada' 'desgastado' 'gran' 'grande' 'viaje', 
		invent [;
			if (inventory_stage == 1 && self in HABITACION) {
				print "su maleta de viaje, ya preparada y apoyada junto a la 
				puerta";
				return true;
			}
		],
		describe [;
			if (self in TAXI)
				"^La maleta reposa sobre el asiento de al lado.";
		],
		description [;
			O__M(self, 1);
			if (~~self.description_flag) {
				self.description_flag = true;
				" Ningún recuerdo. Esos tendrá que dejárselos atrás.";
			}
			new_line;
			return true;
		],
		before [;
			Close:
				"Ya está cerrad", (o) self, ".";
			Empty:
				"No va a deshacer ", (the) self, " ahora.";
			Open, Receive:
				if (location == HABITACION)
					"Ya tiene dentro todo cuanto puede llevar consigo.";
				else
					"Ahora no necesita nada de lo que lleva dentro de ", 
					(the) self, ".";
		],
		after [; 
			Take: 
				if (self hasnt moved) 
					"Recoge ", (the) self, " del suelo."; 
		],
		size 5, 
 private
		description_flag false,	! indica si el objeto ha sido descrito
 has	female openable ~open;

Item	libro_bolsillo "librito de poemas" HABITACION
 with	name_m	'ejemplar' 'librito' 'libro' 'poemario' 'tomo' 'volumen',
		gender	G_MASCULINO,
		adjectives
			'bolsillo' 'encuadernado' 'negra' 'negras' 'negro' 'pequeno' 
			'poemas' 'poesia' 'tapa' 'tapas',
		description [;
			return O__M(self, 1);
		],
		before [;
			Close:
				"Ya estaba cerrad", (o) self, ".";
			Consult, Open, Read, Search:
				!! Si no lo tiene encima, antes se fuerza al protagonista a 
				!! coger el objeto. Si el intento de coger el libro falla, 
				!! AttemptToTakeObject() imprime un mensaje de error y la 
				!! acción finaliza sin llegar a ejecutarse.
				if (parent(self) ~= player)
					if (AttemptToTakeObject(self))
						return true;
				O__M(self, 2);
				if (billete hasnt general) {
					give billete general;
					move billete to real_location;
					new_line;
					return O__M(self, 3);
				}
				return true;
			Receive:
				if (noun == self or player && second == self)
					"Eso no tiene sentido.";
				if (noun == billete && second == self)
					"Ya no necesita tenerlo ahí escondido.";
				if (noun ~= billete && second == self)
					"No se puede esconder algo así entre las páginas de un 
					libro.";
		], 
		size 3, 
 has	female;

!!	<>	El atributo 'general' se activa al descubrir el billete.
!!	<>	TODO - huele el billete
Item	billete LIMBO
 with	short_name [;
			if (self.description_flag) print "billete";
			else print "trozo de papel";
			return true;
		], 
		name_m	'billete' 'papel' 'pase', 
		gender	G_MASCULINO, 
		adjectives 'antonio' 'barcaza' 'pedazo' 'san' 'trozo',
		description [;
			if (~~self.description_flag) {
				self.description_flag = true;
				print "Si, es él. ";
			}
			O__M(self, 1);
			if (real_location == HABITACION)
				" Aún hay tiempo, pero no puede entretenerse. Tiene que salir 
				de aquí.";
			new_line;
			return true;
		], 
		size 1,
 private
		description_flag false,	! indica si el objeto ha sido descrito
 has	male;

!!------------------------------------------------------------------------------
!! NPCs:


